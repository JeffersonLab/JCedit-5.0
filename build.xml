<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~   Copyright (c) 2016.  Jefferson Lab (JLab). All rights reserved. Permission
  ~   to use, copy, modify, and distribute  this software and its documentation for
  ~   educational, research, and not-for-profit purposes, without fee and without a
  ~   signed licensing agreement.
  ~
  ~   IN NO EVENT SHALL JLAB BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL
  ~   INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING
  ~   OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF JLAB HAS
  ~   BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  ~
  ~   JLAB SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  ~   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  ~   PURPOSE. THE CLARA SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY,
  ~   PROVIDED HEREUNDER IS PROVIDED "AS IS". JLAB HAS NO OBLIGATION TO PROVIDE
  ~   MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
  ~
  ~   This software was developed under the United States Government license.
  ~   For more information contact author at gurjyan@jlab.org
  ~   Department of Experimental Nuclear Physics, Jefferson Lab.
  -->

<project name="JCedit" default="all">

    <property environment ="env"/>
    <property file="jcedit.properties"/>

    <dirname property="module.JCedit.basedir" file="${ant.file}"/>

    <!-- checks coda environmental variable -->
    <target name="coda_env.check">
        <condition property="coda_env_isSet">
            <isset property="env.CODA"/>
        </condition>
    </target>

    <!-- condition in case $CODA is set -->
    <target name="coda_env.exist" depends="coda_env.check" if="coda_env_isSet">
        <property name="build_dir"  value="${env.CODA}" />
        <property name="jar_dir" value="${build_dir}/common/jar"/>
        <property name="jena_jar_dir" value="${build_dir}/common/jar/jena"/>
        <property name="common_bin_dir" value="${build_dir}/common/bin"/>
        <property name="bin_dir" value="${build_dir}/Linux-i686/bin"/>
        <property name="bin64_dir" value="${build_dir}/Linux-x86_64/bin"/>
        <property name="bin_source_dir" value="${module.JCedit.basedir}/bin/coda"/>
        <path id="library.lib.classpath">
<!--            <pathelement location="${build_dir}/common/jar/jena/jena.jar"/>-->
            <fileset dir="${build_dir}/common/jar" >
                <include name="*.jar" />
            </fileset>
            <fileset dir="${build_dir}/common/jar/jena" >
                <include name="*.jar" />
            </fileset>
        </path>
    </target>

    <!-- in case $CODA is not set crete build dir in the distribution dir and install everything there-->
    <target name="coda_env.not_exist" depends="coda_env.check" unless="coda_env_isSet">
        <mkdir dir = "./build"/>
        <property name="build_dir"  value="./build" />
        <property name="jar_dir" value="${build_dir}/common/jar"/>
        <property name="jena_jar_dir" value="${build_dir}/common/jar/jena"/>
        <property name="common_bin_dir" value="${build_dir}/common/bin"/>
        <property name="bin_dir" value="${build_dir}/Linux-i686/bin"/>
        <property name="bin64_dir" value="${build_dir}/Linux-x86_64/bin"/>
        <property name="bin_source_dir" value="${module.JCedit.basedir}/bin/local"/>
        <path id="library.lib.classpath">
<!--            <pathelement location="${build_dir}/common/jar/jena.jar"/>-->
            <fileset dir="${build_dir}/common/jar" >
                <include name="*.jar" />
            </fileset>
            <fileset dir="${build_dir}/common/jar/jena" >
                <include name="*.jar" />
            </fileset>
        </path>
    </target>

    <!-- Compiler options -->
    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.max.memory" value="128m"/>
    <patternset id="ignored.files">
        <exclude name="**/CVS/**"/>
        <exclude name="**/SCCS/**"/>
        <exclude name="**/RCS/**"/>
        <exclude name="**/rcs/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/.sbas/**"/>
        <exclude name="**/.IJI.*/**"/>
        <exclude name="**/vssver.scc/**"/>
        <exclude name="**/vssver2.scc/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/*.o/**"/>
        <exclude name="**/*.obj/**"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.zip"/>
        <include name="*.war"/>
        <include name="*.egg"/>
        <include name="*.ear"/>
        <include name="*.swc"/>
        <include name="*.jar"/>
    </patternset>
    <patternset id="compiler.resources">
        <include name="**/?*.properties"/>
        <include name="**/?*.xml"/>
        <include name="**/?*.gif"/>
        <include name="**/?*.png"/>
        <include name="**/?*.jpeg"/>
        <include name="**/?*.jpg"/>
        <include name="**/?*.html"/>
        <include name="**/?*.dtd"/>
        <include name="**/?*.tld"/>
    </patternset>

    <!-- JDK definitions -->

    <property name="jdk.bin.1.6" value="${jdk.home.1.6}/bin"/>
    <path id="jdk.classpath.1.6">
        <fileset dir="${jdk.home.1.6}">
            <include name="jre/lib/javaws.jar"/>
            <include name="jre/lib/deploy.jar"/>
            <include name="jre/lib/jsse.jar"/>
            <include name="jre/lib/charsets.jar"/>
            <include name="jre/lib/plugin.jar"/>
            <include name="jre/lib/resources.jar"/>
            <include name="jre/lib/management-agent.jar"/>
            <include name="jre/lib/jce.jar"/>
            <include name="jre/lib/rt.jar"/>
            <include name="jre/lib/ext/dnsns.jar"/>
            <include name="jre/lib/ext/sunpkcs11.jar"/>
            <include name="jre/lib/ext/sunjce_provider.jar"/>
            <include name="jre/lib/ext/localedata.jar"/>
        </fileset>
    </path>

    <property name="project.jdk.home" value="${jdk.home.1.6}"/>
    <property name="project.jdk.bin" value="${jdk.bin.1.6}"/>
    <property name="project.jdk.classpath" value="jdk.classpath.1.6"/>


    <!-- Project Libraries -->

    <!--<path id="library.lib.classpath">-->
        <!--<pathelement location="${build_dir}/common/jar/jena.jar"/>-->
    <!--</path>-->

    <!-- Check configuration and installation -->
    <!--<property name="jar_dir" value="${build_dir}/common/jar"/>-->
    <!--<property name="bin_dir" value="${build_dir}/Linux/bin"/>-->

    <!-- check existence of directories -->
    <target name="jar_dir.check">
        <condition property="jar_dir.exists">
            <available file="${jar_dir}" type="dir"/>
        </condition>
    </target>
    <target name="jena.dir.check">
        <condition property="jena.dir.exists">
            <available file="${jena_jar_dir}" type="dir"/>
        </condition>
    </target>
    <target name="common_bin_dir.check">
        <condition property="common_bin_dir.exists">
            <available file="${common_bin_dir}" type="dir"/>
        </condition>
    </target>
    <target name="bin_dir.check">
        <condition property="bin_dir.exists">
            <available file="${bin_dir}" type="dir"/>
        </condition>
    </target>
    <target name="bin64_dir.check">
        <condition property="bin64_dir.exists">
            <available file="${bin64_dir}" type="dir"/>
        </condition>
    </target>
    <target name="jena_jar.check">
        <condition property="jena_jar.exists">
            <available file="${jena_jar_dir}/jena.jar" type="file"/>
        </condition>
    </target>

    <target name="istack.check">
        <condition property="istack.exists">
            <available file="${jar_dir}/istack-commons-runtime-3.0.11.jar" type="file"/>
        </condition>
    </target>

    <!-- creating directories -->
    <target name="jar_dir.create" depends="jar_dir.check" unless="jar_dir.exists">
        <echo>... creating missing ${jar_dir}"</echo>
        <mkdir dir = "${jar_dir}"/>
    </target>
    <target name="jena_jar_dir.create" depends="jena.dir.check" unless="jena.dir.exists">
        <echo>... creating ${jena_jar_dir} </echo>
        <mkdir dir="${jena_jar_dir}"/>
    </target>

    <target name="jena_jar.install" depends="jena_jar.check" unless="jena_jar.exists">
        <echo>... installing ${module.afecs.basedir}/lib/jena.jar"</echo>
        <copy file = "${module.JCedit.basedir}/lib/jena.jar" todir="${build_dir}/common/jar/jena"/>
    </target>

    <target name="istack.install" depends="istack.check" unless="istack.exists">
        <echo>... installing ${module.afecs.basedir}/lib/istack-commons-runtime-3.0.11.jar"</echo>
        <copy file="${module.JCedit.basedir}/lib/istack-commons-runtime-3.0.11.jar" todir="${build_dir}/common/jar"/>
    </target>


    <target name="common_bin_dir.create" depends="common_bin_dir.check" unless="common_bin_dir.exists">
        <echo>... creating missing ${common_bin_dir}"</echo>
        <mkdir dir = "${common_bin_dir}"/>
    </target>
    <target name="bin_dir.create" depends="bin_dir.check" unless="bin_dir.exists">
        <echo>... creating missing ${bin_dir}"</echo>
        <mkdir dir = "${bin_dir}"/>
    </target>
    <target name="bin64_dir.create" depends="bin64_dir.check" unless="bin64_dir.exists">
        <echo>... creating missing ${bin64_dir}"</echo>
        <mkdir dir = "${bin64_dir}"/>
    </target>

    <target name="check_config" depends="jar_dir.create, jena_jar_dir.create, common_bin_dir.create,bin_dir.create,bin64_dir.create, istack.install, jena_jar.install" description="Check configuration"/>

    <property name="module.jdk.home.JCedit" value="${project.jdk.home}"/>
    <property name="module.jdk.bin.JCedit" value="${project.jdk.bin}"/>
    <property name="module.jdk.classpath.JCedit" value="${project.jdk.classpath}"/>

    <property name="compiler.args.JCedit" value="${compiler.args}"/>

    <property name="JCedit.output.dir" value="${module.JCedit.basedir}/out/production/JCedit"/>
    <property name="JCedit.testoutput.dir" value="${module.JCedit.basedir}/out/test/JCedit"/>

    <path id="JCedit.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="JCedit.module.classpath">
        <path refid="${module.jdk.classpath.JCedit}"/>
        <path refid="library.lib.classpath"/>
    </path>

    <path id="JCedit.runtime.module.classpath">
        <pathelement location="${JCedit.output.dir}"/>
        <pathelement location="${JCedit.testoutput.dir}"/>
        <path refid="library.lib.classpath"/>
    </path>


    <patternset id="excluded.from.module.JCedit">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation.JCedit">
        <patternset refid="excluded.from.module.JCedit"/>
    </patternset>

    <path id="JCedit.module.sourcepath">
        <dirset dir="${module.JCedit.basedir}">
            <include name="src"/>
        </dirset>
    </path>


    <target name="compile.module.JCedit" depends="compile.module.JCedit.production,compile.module.JCedit.tests" description="Compile module JCedi"/>

    <target name="compile.module.JCedit.production" description="Compile module JCedit; production classes">
        <mkdir dir="${JCedit.output.dir}"/>
        <javac includeantruntime = "false" destdir="${JCedit.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.JCedit}/javac">
            <compilerarg line="${compiler.args.JCedit}"/>
            <bootclasspath refid="JCedit.module.bootclasspath"/>
            <classpath refid="JCedit.module.classpath"/>
            <src refid="JCedit.module.sourcepath"/>
            <patternset refid="excluded.from.compilation.JCedit"/>
        </javac>

        <copy todir="${JCedit.output.dir}">
            <fileset dir="${module.JCedit.basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.JCedit.tests" depends="compile.module.JCedit.production" description="compile module JCedit; test classes" unless="skip.tests"/>

    <target name="clean.module.JCedit" description="cleanup module">
        <delete dir="${JCedit.output.dir}"/>
        <delete dir="${JCedit.testoutput.dir}"/>
    </target>

    <target name="change_permissions">
        <chmod file="${common_bin_dir}/jcedit" perm="a+x"/>
        <chmod file="${common_bin_dir}/jcedit_view" perm="a+x"/>

        <chmod file="${bin_dir}/jcedit" perm="a+x"/>
        <chmod file="${bin_dir}/jcedit_view" perm="a+x"/>

        <chmod file="${bin64_dir}/jcedit" perm="a+x"/>
        <chmod file="${bin64_dir}/jcedit_view" perm="a+x"/>
    </target>

    <target name="delete.jar" description="delete distribution jar file">
        <delete file="jcedit-4.0.jar"/>
        <delete>
            <fileset dir="${env.CODA}/common/jar">
                <include name="jcedit-*.jar"/>
            </fileset>
        </delete>
    </target>

    <target name="build.jar" description="build jar file">
        <jar destfile="jcedit-4.0.jar" basedir="${JCedit.output.dir}"/>
    </target>

    <target name="build.tar" description="build tar file">
        <delete dir="${JCedit.output.dir}"/>
        <tar destfile="jcedit.tar" basedir="./" excludes=" jcedit.tar, build.xml, JCedit-4.0.iml, JCedit-4.0.ipr, JCedit-4.0.iws, jcedit.properties, **/classes/**, **/out/**, **/src/**" />
    </target>

    <target name="build.zip" description="create distribution zip file">
        <gzip src="jcedi.tar" zipfile="jcedi.tar.gz" />
    </target>

    <target name="delete.tar" description="delete distribution tar file">
        <delete file="jcedi.tar"/>
    </target>

    <target name="clean" depends="clean.module.JCedit, delete.jar" description="cleanup all"/>

    <target name="targ" depends="build.tar, build.zip, delete.tar" description="build tar distribution"/>

    <target name="jaxb_cp" description="jaxb_copy">
    <copy file = "${module.JCedit.basedir}/lib/javax.activation-1.2.0.jar" todir="${build_dir}/common/jar" overwrite="true"/>
    <copy file = "${module.JCedit.basedir}/lib/jaxb-api-2.3.0.jar" todir="${build_dir}/common/jar" overwrite="true"/>
    <copy file = "${module.JCedit.basedir}/lib/jaxb-core-2.3.0.jar" todir="${build_dir}/common/jar" overwrite="true"/>
    <copy file = "${module.JCedit.basedir}/lib/jaxb-impl-2.3.0.jar" todir="${build_dir}/common/jar" overwrite="true"/>
    <copy file = "${module.JCedit.basedir}/lib/jaxb-runtime-2.3.1.jar" todir="${build_dir}/common/jar" overwrite="true"/>
    </target>

    <target name="cp" description="install">
        <copy file="jcedit-4.0.jar" todir="${build_dir}/common/jar" overwrite="true"/>

        <copy file = "${bin_source_dir}/jcedit" todir="${common_bin_dir}"/>
        <copy file = "${bin_source_dir}/jcedit_view" todir="${common_bin_dir}"/>

        <copy file = "${bin_source_dir}/jcedit" todir="${bin_dir}"/>
        <copy file = "${bin_source_dir}/jcedit_view" todir="${bin_dir}"/>

        <copy file = "${bin_source_dir}/jcedit" todir="${bin64_dir}"/>
        <copy file = "${bin_source_dir}/jcedit_view" todir="${bin64_dir}"/>
    </target>

    <target name="install" depends="jar, cp, change_permissions" description="build and install"/>

    <target name="jar" depends="coda_env.exist, coda_env.not_exist, check_config, clean, jaxb_cp, compile.module.JCedit, build.jar" description="build"/>

    <target name="all" depends="jar" description="build"/>
</project>